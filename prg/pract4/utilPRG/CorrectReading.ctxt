#BlueJ class context
comment0.target=CorrectReading
comment0.text=\n\ Clase\ CorrectReading\:\ clase\ de\ utilidades\ que\ permite\ realizar\ la\ lectura\ \n\ validada\ de\ datos\ de\ tipos\ primitivos\ desde\ la\ entrada\ estandar.\n\ \n\ @author\ (PRG.\ ETSINF\ -\ UPV)\n\ @version\ \ (2018/19)\n
comment1.params=
comment1.target=CorrectReading()
comment1.text=No\ hay\ objetos\ de\ esta\ clase.
comment2.params=sc\ msg
comment2.target=int\ nextInt(java.util.Scanner,\ java.lang.String)
comment2.text=\n\ Lee\ un\ valor\ desde\ un\ objeto\ de\ tipo\ Scanner\ y\ devuelve\ el\ primer\ entero\ leido.\n\ <br><br>\ \n\ Si\ el\ valor\ leido\ no\ es\ un\ entero,\ muestra\ en\ pantalla\ el\ mensaje\:\ \n\ "Por\ favor,\ introduzca\ un\ numero\ entero\ correcto\!\ ...\ "\ \n\ <br><br>\ \ \ \ \n\ La\ lectura\ se\ repite\ hasta\ que\ el\ token\ leido\ sea\ correcto\ y\ devuelve\ el\ \n\ primero\ que\ sea\ entero.\n\n\ @param\ sc\ Scanner\ desde\ el\ que\ se\ lee.\n\ @param\ msg\ String\ con\ la\ pregunta\ que\ se\ muestra\ al\ usuario.\n\ @return\ int,\ valor\ entero.\n
comment3.params=sc\ msg
comment3.target=double\ nextDoublePositive(java.util.Scanner,\ java.lang.String)
comment3.text=\n\ Lee\ un\ valor\ desde\ un\ objeto\ de\ tipo\ Scanner\ y\ devuelve\ el\ primer\ numero\ real\ \n\ no\ negativo\ leido.\n\ <br><br>\n\ Si\ el\ valor\ leido\ es\ un\ n\u00FAmero\ real\ negativo,\ muestra\ en\ pantalla\ el\ mensaje\:\ \n\ "Por\ favor,\ introduzca\ un\ valor\ correcto\!\ ...\ "\ \n\ <br><br>\ \ \ \n\ Si\ el\ valor\ no\ es\ un\ real,\ muestra\ en\ pantalla\ el\ mensaje\:\ \n\ "Por\ favor,\ introduzca\ un\ numero\ real\ correcto\!\ ...\ "\ \n\ <br><br>\ \n\ La\ lectura\ se\ repite\ hasta\ hasta\ que\ sea\ correcto,\ devolviendo\ el\ primero\ \n\ que\ sea\ >\=\ 0.0.\n\ \ \ \n\ @param\ sc\ Scanner\ desde\ el\ que\ se\ lee.\n\ @param\ msg\ String\ con\ la\ pregunta\ que\ se\ muestra\ al\ usuario.\n\ @return\ double,\ valor\ double\ no\ negativo.\n
comment4.params=sc\ msg\ lowerBound\ upperBound
comment4.target=int\ nextInt(java.util.Scanner,\ java.lang.String,\ int,\ int)
comment4.text=\n\ Lee\ un\ valor\ desde\ un\ objeto\ de\ tipo\ Scanner\ y\ devuelve\ el\ primero\ que\ sea\ de\ tipo\ entero\n\ y\ en\ el\ rango\ delimitado\ por\ <code>[lowerBound\ ..\ upperBound]</code>\ donde\ \n\ <code>Integer.MIN_VALUE\ <\=\ lowerBound</code>\ y\ <code>upperBound\ <\=\ Integer.MAX_VALUE</code>.\n\ <br><br>\n\ -\ Si\ el\ entero\ leido\ esta\ fuera\ de\ rango,\ lanza\ una\ excepcion\ de\ tipo\ \n\ \ <code>IllegalArgumentException</code>\ con\ el\ mensaje\:\ \n\ \ "v\ no\ est\u00E1\ en\ el\ rango\ [lowerBound\ ..\ upperBound]"\ \n\ donde\ v\ es\ el\ valor\ leido,\ y\ lowerBoud,\ upperBound\ son\ los\ parametros.\n\ <br><br>\n\ \ \n\ A\ continuacion,\ captura\ dicha\ excepcion\ y\ muestra\ por\ pantalla\ el\ mensaje\ de\ la\ excepcion\n\ junto\ con\ el\ texto\:\ \n\ ".\ Por\ favor,\ introduzca\ un\ valor\ correcto\!\ ...\ "\ \n\ <br><br>\n\ \n\ -\ Si\ el\ valor\ no\ fuera\ un\ entero,\ muestra\ por\ pantalla\ el\ mensaje\:\ \n\ \ "Por\ favor,\ introduzca\ un\ numero\ entero\ correcto\!\ ...\ "\ \n\ <br><br>\ \n\ La\ lectura\ se\ repite\ hasta\ que\ el\ token\ leido\ sea\ correcto\ y\ devuelve\ el\ primero\ \n\ que\ sea\ un\ entero\ valido.\n\ \ \ \n\ @param\ sc\ Scanner\ desde\ el\ que\ se\ lee.\n\ @param\ msg\ String\ con\ la\ pregunta\ que\ se\ muestra\ al\ usuario.\n\ @param\ lowerBound\ int,\ l\u00EDmite\ inferior.\n\ @param\ upperBound\ int,\ l\u00EDmite\ superior.\n\ @return\ int,\ valor\ entero\ dentro\ de\ los\ l\u00EDmites.\n
numComments=5
